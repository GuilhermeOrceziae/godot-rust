language: rust

branches:
  only:
    - staging
    - trying
    - master

matrix:

  allow_failures:
   - rust: nightly
  fast_finish: true

  include:
    - name: cargo fmt
      os: linux
      rust: stable
      env: CI_STAGE_CARGO_FMT=yes
      before_script:
       - rustup component add rustfmt

    - name: cargo clippy (stable)
      os: linux
      rust: stable
      env: CI_STAGE_CARGO_CLIPPY=yes
      before_script:
       - rustup component add clippy

    - name: cargo test (stable)
      os: linux
      rust: stable
      env: CI_STAGE_CARGO_TEST=yes

    - name: cargo build --release (stable)
      os: linux
      rust: stable
      env: CI_STAGE_BUILD_RELEASE=yes

    - name: Godot test (stable)
      os: linux
      rust: stable
      env: CI_STAGE_GODOT_TEST=yes RUST_BACKTRACE=1 GODOT_VER=3.2 GODOT_REL=stable
      before_script:
        - 'wget "https://downloads.tuxfamily.org/godotengine/$GODOT_VER/Godot_v${GODOT_VER}-${GODOT_REL}_linux_headless.64.zip" -O /tmp/godot.zip'
        - unzip /tmp/godot.zip -d godot_bin
        - export PATH=$PATH:$PWD/godot_bin/

    - name: cargo test (nightly)
      os: linux
      rust: nightly
      env: CI_STAGE_CARGO_TEST=yes

    - name: cargo clippy (nightly)
      os: linux
      rust: nightly
      env: CI_STAGE_CARGO_CLIPPY=yes
      before_script:
       - rustup component add clippy

    - name: cargo build --release (nightly)
      os: linux
      rust: nightly
      env: CI_STAGE_BUILD_RELEASE=yes

    - name: Godot test (nightly)
      os: linux
      rust: nightly
      env: CI_STAGE_GODOT_TEST=yes RUST_BACKTRACE=1 GODOT_VER=3.2 GODOT_REL=stable
      before_script:
        - 'wget "https://downloads.tuxfamily.org/godotengine/$GODOT_VER/Godot_v${GODOT_VER}-${GODOT_REL}_linux_headless.64.zip" -O /tmp/godot.zip'
        - unzip /tmp/godot.zip -d godot_bin
        - export PATH=$PATH:$PWD/godot_bin/

    - name: cargo test (stable, windows)
      os: windows
      rust: stable
      env: CI_STAGE_CARGO_TEST=yes CI_MSVC_TEST=yes
      before_script:
        - rustup target add x86_64-pc-windows-msvc

    - name: cargo build --release (stable, windows)
      os: windows
      rust: stable
      env: CI_STAGE_BUILD_RELEASE=yes CI_MSVC_TEST=yes
      before_script:
        - rustup target add x86_64-pc-windows-msvc

    - name: cargo test (nightly, windows)
      os: windows
      rust: nightly
      env: CI_STAGE_CARGO_TEST=yes CI_MSVC_TEST=yes
      before_script:
        - rustup target add x86_64-pc-windows-msvc

    - name: cargo build --release (nightly, windows)
      os: windows
      rust: nightly
      env: CI_STAGE_BUILD_RELEASE=yes CI_MSVC_TEST=yes
      before_script:
        - rustup target add x86_64-pc-windows-msvc

    - name: cargo test ios-simulator
      os: osx
      osx_image: xcode11.4
      rust: stable
      env: CI_STAGE_IOS_SIMULATOR_TEST=yes
      before_script:
       - rustup target add x86_64-apple-ios
       # download cargo-dinghy and set it up for running on an emulator.
       - curl -L https://github.com/snipsco/dinghy/releases/download/cargo-dinghy%2F0.4.37/cargo-dinghy-macos.tgz -o cargo-dinghy-macos.tar.gz
       - tar -zxvf cargo-dinghy-macos.tar.gz
       - mkdir -p $HOME/.cargo/bin
       - cp cargo-dinghy-macos/cargo-dinghy $HOME/.cargo/bin

script:
  - if [[ "$CI_STAGE_CARGO_FMT" == "yes" ]]; then
      cargo fmt --all -- --check;
    fi

  - if [[ "$CI_STAGE_IOS_SIMULATOR_TEST" == "yes" ]]; then
      RUNTIME_ID=$(xcrun simctl list runtimes | grep iOS | cut -d ' ' -f 7 | tail -1);
      export SIM_ID=$(xcrun simctl create My-iphone11 com.apple.CoreSimulator.SimDeviceType.iPhone-11 $RUNTIME_ID);
      xcrun simctl boot $SIM_ID;
      cd gdnative-core;
      cargo dinghy --platform auto-ios-x86_64 test;
      cd ..;
      cd gdnative-sys;
      cargo dinghy --platform auto-ios-x86_64 test;
    fi

  - if [[ "$CI_STAGE_CARGO_CLIPPY" == "yes" ]]; then
      cargo clippy --all --all-features -- -D clippy::style -D clippy::complexity -D clippy::perf -D clippy::dbg_macro -D clippy::todo -D clippy::unimplemented;
    fi

  - if [[ "$CI_STAGE_CARGO_TEST" == "yes" ]]; then
      cargo test --all --all-features;
      if [[ "$CI_MSVC_TEST" == "yes" ]]; then
        cargo test --target x86_64-pc-windows-msvc --all --all-features;
      fi
    fi

  - if [[ "$CI_STAGE_BUILD_RELEASE" == "yes" ]]; then
      cargo build --release;
      if [[ "$CI_MSVC_TEST" == "yes" ]]; then
        cargo build --target x86_64-pc-windows-msvc --release;
      fi
    fi

  - if [[ "$CI_STAGE_GODOT_TEST" == "yes" ]]; then
      cd test;
      cargo build;
      mkdir ./project/lib;
      cp ../target/debug/libgdnative_test.so ./project/lib/;
      "Godot_v${GODOT_VER}-${GODOT_REL}_linux_headless.64" --path ./project/;
      "Godot_v${GODOT_VER}-${GODOT_REL}_linux_headless.64" -e --path ./project/ --run-editor-tests;
      cargo build --features=type_tag_fallback;
      mkdir ./project/lib;
      cp ../target/debug/libgdnative_test.so ./project/lib/;
      "Godot_v${GODOT_VER}-${GODOT_REL}_linux_headless.64" --path ./project/;
      "Godot_v${GODOT_VER}-${GODOT_REL}_linux_headless.64" -e --path ./project/ --run-editor-tests;
    fi
