name: CI

env:
  RUST_BACKTRACE: 1
  GODOT_VER: 3.2
  GODOT_REL: stable

on:
  push:
    branches:
      - staging
      - trying

defaults:
  run:
    shell: bash

jobs:
  clippy:
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        include:
          - rust: stable
            experimental: false
          - rust: nightly
            experimental: true
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@b2417cde72dcf67f306c0ae8e0828a81bf0b189f
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          components: clippy
      - run: cargo clippy --all --all-features -- -D clippy::style -D clippy::complexity -D clippy::perf -D clippy::dbg_macro -D clippy::todo -D clippy::unimplemented;

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@b2417cde72dcf67f306c0ae8e0828a81bf0b189f
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt
      - name: Checking rustfmt
        run: cargo fmt --all -- --check;

  test:
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        include:
          - rust: stable
            os: ubuntu-latest
            experimental: false
          - rust: nightly
            os: ubuntu-latest
            experimental: true
          - rust: stable
            os: windows-latest
            experimental: false
          - rust: nightly
            os: windows-latest
            experimental: true
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@b2417cde72dcf67f306c0ae8e0828a81bf0b189f
        with:
          profile: minimal
          toolchain: stable
      - uses: KyleMayes/install-llvm-action@01144dc97b1e2693196c3056414a44f15180648b
        with:
          version: 10.0
          directory: ${{ runner.temp }}/llvm
      - run: cargo test --all --all-features;
      # cargo test --target x86_64-pc-windows-msvc --all --all-features;

  build_release:
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        include:
          - rust: stable
            os: ubuntu-latest
            experimental: false
          - rust: nightly
            os: ubuntu-latest
            experimental: true
          - rust: stable
            os: windows-latest
            experimental: false
          - rust: nightly
            os: windows-latest
            experimental: true
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@b2417cde72dcf67f306c0ae8e0828a81bf0b189f
        with:
          profile: minimal
          toolchain: stable
      - uses: KyleMayes/install-llvm-action@01144dc97b1e2693196c3056414a44f15180648b
        with:
          version: 10.0
          directory: ${{ runner.temp }}/llvm
      - run: cargo build --release;
      # cargo build --target x86_64-pc-windows-msvc --release;

  godot_test:
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        include:
          - rust: stable
            os: ubuntu-latest
            experimental: false
          - rust: nightly
            os: ubuntu-latest
            experimental: true
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@b2417cde72dcf67f306c0ae8e0828a81bf0b189f
        with:
          profile: minimal
          toolchain: stable
      - uses: KyleMayes/install-llvm-action@01144dc97b1e2693196c3056414a44f15180648b
        with:
          version: 10.0
          directory: ${{ runner.temp }}/llvm
      - name: Installing Godot
        run: |
          wget "https://downloads.tuxfamily.org/godotengine/$GODOT_VER/Godot_v${GODOT_VER}-${GODOT_REL}_linux_headless.64.zip" -O /tmp/godot.zip
          unzip /tmp/godot.zip -d ${{ runner.temp }}/godot_bin
      - name: Building Godot-Rust
        run: |
          cd test;
          cargo build;
      - name: Running Godot Tests
        run: |
          cd test;
          mkdir -p ./project/lib;
          cp ../target/debug/libgdnative_test.so ./project/lib/;
          "${{ runner.temp }}/godot_bin/Godot_v${GODOT_VER}-${GODOT_REL}_linux_headless.64" --path ./project/;
          "${{ runner.temp }}/godot_bin/Godot_v${GODOT_VER}-${GODOT_REL}_linux_headless.64" -e --path ./project/ --run-editor-tests;
          cargo build --features=type_tag_fallback;
          mkdir -p ./project/lib;
          cp ../target/debug/libgdnative_test.so ./project/lib/;
          "${{ runner.temp }}/godot_bin/Godot_v${GODOT_VER}-${GODOT_REL}_linux_headless.64" --path ./project/;
          "${{ runner.temp }}/godot_bin/Godot_v${GODOT_VER}-${GODOT_REL}_linux_headless.64" -e --path ./project/ --run-editor-tests;
          
  # This job doesn't actually test anything, but they're used to tell bors the
  # build completed, as there is no practical way to detect when a workflow is
  # successful listening to webhooks only.
  #
  # ALL THE PREVIOUS JOBS NEEDS TO BE ADDED TO THE `needs` SECTION OF THIS JOB!

  ci-success:
    name: ci
    if: github.event_name == 'push' && success()
    needs:
      - clippy
      - rustfmt
      - test
      - build_release
      - godot_test
    runs-on: ubuntu-latest
    steps:
      - name: Mark the job as a success
        run: exit 0
